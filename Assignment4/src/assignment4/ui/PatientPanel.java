/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package assignment4.ui;

import assignment4.model.City;
import assignment4.model.Community;
import assignment4.model.House;
import assignment4.model.Person;
import assignment4.model.PersonDirectory;
import assignment4.model.HealthSystem;
import assignment4.model.Patient;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class PatientPanel extends javax.swing.JPanel {

    private HealthSystem system;
    
    /**
     * Creates new form PersonPanel
     */
    public PatientPanel(HealthSystem system) {
        this.system = system;
        initComponents();
        cityCBox.removeAllItems();
        communityCBox.removeAllItems();
        
        ArrayList<String> comms = new ArrayList<>();
        for (City c: system.getCityList()){
            cityCBox.addItem(c.toString());
            for (Community com : c.getCommunities()) {
                String curCom = com.toString();
                if(comms.contains(curCom) == false)
                    comms.add(curCom);
            }
        }
        
        for(String com : comms)
            communityCBox.addItem(com);
        
        cityCBox.setEditable(true);
        communityCBox.setEditable(true);

        showPatientsInTable(system.getPatientDirectory().getPatients());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        idText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ageText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        genderCBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        addressText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        communityCBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        cityCBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        stateCBox = new javax.swing.JComboBox<>();
        deleteButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        patientIdText = new javax.swing.JTextField();

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Patient ID", "Age", "Sex", "Community", "City"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientTable);

        jLabel1.setText("Name");

        jLabel2.setText("Person ID");

        jLabel3.setText("Age");

        jLabel4.setText("Sex");

        genderCBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));

        jLabel5.setText("Address");

        jLabel6.setText("Community");

        communityCBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("City");

        cityCBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel8.setText("State");

        stateCBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming" }));

        deleteButton.setText("Delete Selected Person");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add New Person");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update Selected Person");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Patient ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                            .addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel9)
                                    .addGap(84, 84, 84))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel5))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ageText, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                .addComponent(genderCBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addressText)
                                .addComponent(communityCBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cityCBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(stateCBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(patientIdText))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(genderCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(communityCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cityCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(patientIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(updateButton)
                    .addComponent(deleteButton))
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientTable.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to be deleted.");
            return;
        }
        
        Patient patient = (Patient) patientTable.getValueAt(selectedRow, 0);
        if(system.getPatientDirectory().removePatient(patient) && system.getPersonDirectory().removePerson(patient.getPerson()))
            JOptionPane.showMessageDialog(this, "Selected patient was deleted.");
        else
            return;
        
        showPatientsInTable(system.getPatientDirectory().getPatients());
    }//GEN-LAST:event_deleteButtonActionPerformed

    private Patient validateAndGetPatient(String allowedPersonId, String allowedPatientId) {
        Patient patient = new Patient();
        Person person = new Person();
        House house = new House();
        Community community = new Community();
        City city = new City();
        city.setSystem(this.system);
        
        if (person.setName(nameText.getText().trim()) == false) {
            JOptionPane.showMessageDialog(this, "Name is not in the correct format.");
            return null;
        }            
        
        if (person.setId(idText.getText().trim()) == false){
            JOptionPane.showMessageDialog(this, "ID is not in the correct format.");
            return null;
        }
        
        if(patient.setId(patientIdText.getText().trim()) == false) {
            JOptionPane.showMessageDialog(this, "Patient ID is not in the correct format");
            return null;
        }
        
        if (system.getPatientDirectory().findId(patientIdText.getText().trim())) {
            if(allowedPatientId == null || (patientIdText.getText().trim().equals(allowedPatientId) == false)) {
                JOptionPane.showMessageDialog(this, "Patient ID already exists");
                return null;
            }
        }
        
        if (system.getPersonDirectory().findId(idText.getText().trim())) {
            if(allowedPersonId == null || (idText.getText().trim().equals(allowedPersonId) == false)) {
                JOptionPane.showMessageDialog(this, "Person ID already exists");
                return null;
            }
        }
            
        if (person.setAge(ageText.getText().trim()) == false){
            JOptionPane.showMessageDialog(this, "Age is not in the correct format.");
            return null;
        }
            
        
        person.setSex(genderCBox.getItemAt(genderCBox.getSelectedIndex()));
        
        if (house.setAddress(addressText.getText().trim()) == false){
            JOptionPane.showMessageDialog(this, "House is not in the correct format.");
            return null;
        }
        
        ArrayList<String> commItems = getAllComboBoxItems(communityCBox);
        
        String commSelection = communityCBox.getSelectedItem().toString().trim();
        
        String citySelection = cityCBox.getSelectedItem().toString().trim();
        
        ArrayList<String> cityItems = getAllComboBoxItems(cityCBox);
        
        boolean newCity = !cityItems.contains(citySelection);
        boolean newComm = !commItems.contains(commSelection); // never before seen community name

        if(newCity) {
            // create both community and city
            if(community.setName(commSelection) == false) {
                JOptionPane.showMessageDialog(this, "Community name is not in the correct format.");
                return null;
            }
            if (city.setName(citySelection) == false) {
                JOptionPane.showMessageDialog(this, "City is not in the correct format.");
                return null;
            }
            if (city.setState(stateCBox.getSelectedItem().toString()) == false) {
                JOptionPane.showMessageDialog(this, "State is not in the correct format.");
                return null;
            }
            community.setCity(city);
            city.addCommunity(community);
            system.addCity(city);
        } else if (newComm) {
            //get existing city and add new community
            if(community.setName(commSelection) == false) {
                JOptionPane.showMessageDialog(this, "Community name is not in the correct format.");
                return null;
            }
            city = system.getCity(citySelection);
            community.setCity(city);
            city.addCommunity(community);
        } else {
            
            //both community and city exist. get the objects
            Community comm = system.getCommunity(commSelection);
            city = system.getCity(citySelection);
            
            if (comm.getCity().getName().equals(city.getName()) == false) {
                //existing community and city but both aren't linked.
                //so, create a new community and link it to the city
                if(community.setName(commSelection) == false) {
                    JOptionPane.showMessageDialog(this, "Community name is not in the correct format.");
                    return null;
                }
                community.setCity(city);
                city.addCommunity(community);
            } else {
                // already linked.
                community = comm;
            }
        }
        
        // add houses and people
        house.setCommunity(community);
        community.addHouse(house);
        house.addPerson(person);
        person.setHouse(house);
        
        patient.setPerson(person);
        
        return patient;
    }
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        Patient patient = validateAndGetPatient(null, null);
        if (patient == null)
            return;
        system.getPatientDirectory().addPatient(patient);
        system.getPersonDirectory().addPerson(patient.getPerson());
        showPatientsInTable(system.getPatientDirectory().getPatients());
        JOptionPane.showMessageDialog(this, "Patient was added successfully.");
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to be updated.");
            return;
        }
        Patient curVal = system.getPatientDirectory().getPatients().get(selectedRow);
        Patient patient = validateAndGetPatient(curVal.getPerson().getId(), curVal.getId());
        if (patient == null)
            return;
        system.getPatientDirectory().updatePatient(selectedRow, patient);
        system.getPersonDirectory().updatePerson(selectedRow, patient.getPerson());
        showPatientsInTable(system.getPatientDirectory().getPatients());
        JOptionPane.showMessageDialog(this, "Row was successfully updated.");
    }//GEN-LAST:event_updateButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField addressText;
    private javax.swing.JTextField ageText;
    private javax.swing.JComboBox<String> cityCBox;
    private javax.swing.JComboBox<String> communityCBox;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> genderCBox;
    private javax.swing.JTextField idText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameText;
    private javax.swing.JTextField patientIdText;
    private javax.swing.JTable patientTable;
    private javax.swing.JComboBox<String> stateCBox;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    private ArrayList<String> getAllComboBoxItems(JComboBox<String> cbox) {
        ArrayList<String> items = new ArrayList<>();
        for (int i=0; i < cbox.getItemCount(); i++)
            items.add(cbox.getItemAt(i));
        return items;
    }

    private void showPatientsInTable(ArrayList<Patient> patientList) {
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        model.setRowCount(0);
        for (Patient patient: patientList) {
            Person p = patient.getPerson();
            Object[] row = new Object[6];
            row[0] = patient;
            row[1] = patient.getId();
            row[2] = p.getAge();
            row[3] = p.getSex();
            Community comm = p.getHouse().getCommunity();
            row[4] = comm.getName();
            row[5] = comm.getCity().getName();
            model.addRow(row);
        }
    }
}
